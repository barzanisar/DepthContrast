wb_extra_tags: ['pointnet', 'train_all_FOV3000_60', 'vdc', 'linear_probe']
resume: true
linear_probe: true # True for linear probe
linear_probe_base_model_fn: 'checkpoint-ep340.pth.tar'
num_workers: 8

log2tb: true
log2wb: true

test_freq: 1 # save chkp after every <freq> epochs, resume will load the last saved chkp
print_freq: 100 # print progress after processing every <freq> iters or batches
ckpt_save_interval: 20
save_ckpt_after_epochs: 200

WANDB:
  ENABLED: True
  PROJECT: DepthContrast_dense
  ENTITY: trailab
  SUMMARY_HIGHEST_METRIC: None
  dir: '/DepthContrast/output'

dataset:
  DATASET_NAMES: [DenseDataset]
  INFO_PATHS: 
    train: ['dense_infos_train_all_FOV3000_60.pkl']
    val: ['dense_infos_val_all_FOV3000_15.pkl']
  BATCHSIZE_PER_REPLICA: 16
  LABEL_TYPE: objects #sample_index, objects, class_names
  DATA_TYPE: points
  SENSOR_TYPE: 'hdl64'
  SIGNAL_TYPE: 'strongest'
  Lidar: True
  VOX: False
  APPLY_WEATHER_AUG: True # False for linear probe
  DROR: 0.45
  UPSAMPLE: '1in1'
  COUPLED: False
  WET_SURFACE: '1in10' #'1in10'
  SNOW: 'uniform_gunn_1in10' #'1in10'
  FOG_AUGMENTATION: 'CVL_1in10'
  FOG_NOISE_VARIANT: 'v2'
  FOG_GAIN: True
  FOV_POINTS_ONLY: True
  POINT_TRANSFORMS: # comment all except ToTensorLidar for linear probe
    - name: ToTensorLidar
  COLLATE_FUNCTION: "point_moco_collator"
  DROP_LAST: True

optimizer:
  name: "sgd"
  weight_decay: 0.0001
  momentum: 0.9
  nesterov: False
  num_epochs: 101
  lr:
    name: "cosine"
    base_lr: 0.1 #0.1 for linear_probe
    final_lr: 0.0001 #0 for linear_probe

model:
  name: "vdc_snow1in10_wet_fog1in10_cubeF_upsample_FOV3000"
  model_dir: "checkpoints/pointnetMSG_train_all_FOV3000_60/vdc"
  model_input: ["points"]
  model_feature: [["vdc_feats"], ["vdc_feats"]]
  Lidar: True
  VOX: False
  arch_point: "pointnet_msg"
  linear_probe_dim: [128, 2]
  args_point:
    use_mlp: True
    mlp_dim: [128, 128, 128]

# Linear Probe
loss:
  name: "FocalLoss"
  args:
    num_classes: 1 #4 #1 #num_classes does not include background class i.e. [car, pedestrian]
    alpha: None #[0.6, 0.1, 0.1, 0.1, 0.1] if None, then class weights are calc as 1/class_freq
    gamma: 0
    reduction: 'mean'
    ignore_index: -100 # don't ignore any class if objects
