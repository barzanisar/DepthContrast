# python -m torch.distributed.launch --nproc_per_node=1 tools/main_dist.py --launcher pytorch --multiprocessing-distributed --cfg configs/waymo.yaml
# python tools/main_dist.py --cfg configs/waymo.yaml
wb_extra_tags: ['pointrcnn', 'waymo', 'linearprobe_segmentation_waymo']
resume: true
num_workers: 4 # should be same as (16 --cpus-per-task i.e. per node)/(4 gpus per node)
load_pretrained_checkpoint: 'all'

log2tb: false
log2wb: true

test_freq: 1 #save chkp after every <freq> epochs, resume will load the last saved chkp
print_freq: 1 #print progress after processing every <freq> iters or batches
ckpt_save_interval: 1 #save only models to finetune for object detection
save_ckpt_after_epochs: 0

WANDB:
  ENABLED: True 
  PROJECT: SSL3dObject
  ENTITY: trailab
  SUMMARY_HIGHEST_METRIC: None
  dir: '/DepthContrast/output'

dataset:
  DATASET_NAMES: [WaymoDataset]
  PROCESSED_DATA_TAG: 'waymo_processed_data_v_1_2_0' #single return, but waymo_short has second return as well
  DATA_SPLIT: {'train': train, 'val': train}
  DATA_PATH: 'data/waymo'
  FRAME_SAMPLING_INTERVAL: {'train': 20, 'val': 10} # 1/3rd of waymo pick every 10th frame to pretrain on so 10% waymo, if it is 2 then it is (1/2)=50% waymo
  BATCHSIZE_PER_REPLICA: 16 #Change to 14, if input moco feats is false, use 8
  POINT_CLOUD_RANGE:  [  0. , -75. ,  -3. ,  75. ,  75. ,   3. ] #[-75.2, -75.2, -2, 75.2, 75.2, 4]
  CLASS_NAMES: ['Vehicle', 'Pedestrian', 'Cyclist'] #['Vehicle', 'Pedestrian', 'Cyclist']
 

  POINT_TRANSFORMS: # comment all except ToTensorLidar for linear probe
    - NAME: random_world_flip
      ALONG_AXIS_LIST: ['x', 'y']
    - NAME: random_world_rotation
      WORLD_ROT_ANGLE: [-0.78539816, 0.78539816] #-45deg, + 45deg
    - NAME: random_world_scaling
      WORLD_SCALE_RANGE: [0.95, 1.05]
    - NAME: random_local_translation
      LOCAL_TRANSLATION_RANGE: [-0.3, 0.3]
      ALONG_AXIS_LIST: ['x', 'y']
    - NAME: random_local_rotation
      LOCAL_ROT_ANGLE: [-0.78539816, 0.78539816]
    - NAME: random_local_scaling
      LOCAL_SCALE_RANGE: [0.95, 1.05]

    # - NAME: random_cuboid_lidar
    #   npoints: 10000
    # - NAME: random_drop

  SAMPLE_NUM_POINTS: 20000
  
  VOX: True

  COLLATE_FUNCTION: "downstream_collator"
  DROP_LAST: True

optimizer:
  name: "sgd"
  weight_decay: 0.0001
  momentum: 0.9
  nesterov: True
  num_epochs: 10
  warmup_epochs: 1
  lr:
    name: "cosine_warm_up"
    base_lr: 0.24 #0.1 for linear_probe #0.12

model:
  model_dir: "checkpoints/centerpoint"
  name: "pretrain_pseudo_8"
  linear_probe: true #meaning finetune

  VOX: True

  MODEL_BASE:
    NAME: CenterPoint

    VFE:
      NAME: MeanVFE

    BACKBONE_3D:
      NAME: VoxelResBackBone8x

    MAP_TO_BEV:
      NAME: HeightCompression
      NUM_BEV_FEATURES: 256

    BACKBONE_2D:
      NAME: BaseBEVBackbone

      LAYER_NUMS: [5, 5]
      LAYER_STRIDES: [1, 2]
      NUM_FILTERS: [128, 256]
      UPSAMPLE_STRIDES: [1, 2]
      NUM_UPSAMPLE_FILTERS: [256, 256]

    
  SEGMENTATION_HEAD:
    CLS_FC: [768, 23]
    loss_types: ['CELoss', 'LovLoss']
    loss_weights: [1.0, 1.0]
    label_smoothing: 0.1